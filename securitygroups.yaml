Description: >
  This template contains the security groups required by our entire stack.
  We create them in a seperate nested template, so they can be referenced
  by all of the other nested templates.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the security groups should be deployed to

Resources:
  # This security group defines who/where is allowed to access the ECS hosts directly.
  # By default we're just allowing access from the load balancer.  If you want to SSH
  # into the hosts, or expose non-load balanced services you can open their ports here.
  ECSHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
      SecurityGroupIngress:
        # Only allow inbound access to ECS from the ELB
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ECS-Hosts

  # This security group allow ECS instances to access the RDS host via 3306.
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the load balancer that sits in front of ECS
      SecurityGroupIngress:
        # Allow access for ECS to RDS
        - SourceSecurityGroupId: !Ref ECSHostSecurityGroup
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-RDS

  # This security group defines who/where is allowed to access the Application Load Balancer.
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the load balancer that sits in front of ECS
      SecurityGroupIngress:
        # You can further restrict that to make it an internal application, this is left opened to the world for the purpose of this exercise.
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LoadBalancers

Outputs:
  ECSHostSecurityGroup:
    Description: A reference to the security group for ECS hosts
    Value: !Ref ECSHostSecurityGroup
    Export: 
      Name: ECSHostSecurityGroup

  LoadBalancerSecurityGroup:
    Description: A reference to the security group for load balancers
    Value: !Ref LoadBalancerSecurityGroup
    Export: 
      Name: LoadBalancerSecurityGroup
    
  RDSSecurityGroup:
    Description: A reference to the security group for load balancers
    Value: !Ref RDSSecurityGroup
    Export: 
      Name: RDSSecurityGroup